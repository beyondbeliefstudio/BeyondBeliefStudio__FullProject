---
import type { HTMLAttributes } from "astro/types";
import Heading from "@shared/components/Heading.astro";

let { faq } = Astro.props;

export interface LinkProps extends HTMLAttributes<"section"> {
  id: string;
  ariaLabel: string;
};

const { 
  id,
  ariaLabel,
    ...rest
} = Astro.props;

---

<section id={id} aria-label={ariaLabel}>
    <div class="container-md column-main">
        <div class="content-lg">
            <Heading tag="h2" size="xl" fontFamily="primary" marginBottom="m">Frequently Asked Questions</Heading>
        </div>
        <div class="content-lg">
            <div class="accordion">
                {
                    faq.map((data: {tag: string; question: string; answer: string}) => (
                        <div class="accordion__item">
                            <div class="accordion__question" aria-expanded="false" aria-controls={data.tag} tabindex="0" role="button">
                                <div class="accordion__button">
                                    <div class="circle">
                                        <span class="horizontal"></span>
                                        <span class="vertical"></span>
                                    </div>
                                </div>
                                <Heading tag="h3" size="s" fontFamily="secondary" marginBottom="none" class="accordion__headings">{data.question}</Heading>
                            </div>
                            <div id={data.tag} class="accordion__content" hidden>
                                    <div set:html={data.answer}></div>
                            </div>
                        </div>
                    ))
                }
            </div>
        </div>
    </div>
</section>

<style lang="scss" is:global>
.accordion {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    
    &__item {
        // background: var(--light-100);
        background: #ffffffab;
		border: 1px solid #fff;
		backdrop-filter: blur(18px);
        border-radius: var(--border-radius-medium);
        padding: 1.5rem;
        display: flex;
        flex-direction: column;
        gap: 1rem;

        @media screen and (max-width: 768px) {
            padding: 1rem;
        }
    }
    
    &__question {
        display: flex;
        width: 100%;
        gap: 2rem;
        align-items: center;
        cursor: pointer;

        @media screen and (max-width: 768px) {
            gap: 1rem;
        }
    }
    
    &__button {
        background: none;
        cursor: pointer;
        padding: 0;
        width: 48px;
        height: 48px;
        position: relative;
        border: 0px;

        @media screen and (max-width: 768px) {
            width: 35px;
            height: 35px;
            
        }

        .circle {
            background: var(--brand-primary);
            border-radius: 50%;
            width: 100%;
            height: 100%;
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .horizontal,
        .vertical {
            position: absolute;
            width: 24px;
            height: 3px;
            background-color: var(--dark-900);
            transition: background-color 0.3s ease;
            border-radius: 2px;

            @media screen and (max-width: 768px) {
                width: 16px;
            }
        }

        .horizontal {
            opacity: 1;
        }

        .vertical {
            transform: rotate(90deg);
            transform-origin: center;
            transition: .25s ease-in-out all;
        }
    }
    
    &__headings {
        width: fit-content;
        text-align: left;
        max-width: calc(100% - 88px);

    }
    
    &__content {
        color: #1b1b1b;
        margin-top: 0;
        overflow: hidden;
        padding: 0;
        line-height: 1.5;
        text-align: left;
        margin-left: calc(50px + 2rem);

        @media screen and (max-width: 768px) {
            margin-left: calc(35px + 1rem);
        }
    
        p {
            margin-bottom: 0;
        }

        ol {
            padding-left: 1.5rem;
            margin: 1rem 0;
            
            li {
                margin-bottom: 0.5rem;
                line-height: 1.6;
            }
        }
        
        p {
            margin-bottom: 1rem;
            
            &:last-child {
                margin-bottom: 0;
            }
        }
        
        strong {
            font-weight: 700;
        }
        
        a {
            font-weight: 700;
            text-decoration: underline;
            transition: .3s ease-in-out color;

            &:hover {
                opacity: .8;
            }
        }
        
    }
}

.accordion__question[aria-expanded="true"] {
    .accordion__button {
        .circle {
            .vertical {
                transform: rotate(180deg);
            }
            
            .horizontal {
                width: 0;
            }
        }
    }
}


</style>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const accordionQuestions = document.querySelectorAll(".accordion__question");

  accordionQuestions.forEach((question) => {
    question.addEventListener("click", () => {
      const isExpanded = question.getAttribute("aria-expanded") === "true";
      const contentId = question.getAttribute("aria-controls");
      const content = contentId ? document.getElementById(contentId) : null;

      // Collapse all accordions
      accordionQuestions.forEach((q) => {
        const contentToHide = document.getElementById(q.getAttribute("aria-controls") || "");
        q.setAttribute("aria-expanded", "false");
        if (contentToHide) {
          contentToHide.setAttribute("hidden", "");
          gsap.to(contentToHide, { height: 0, opacity: 0, duration: 0.3, ease: "power2.inOut" });
        }
      });

      // If the clicked accordion was not expanded, expand it
      if (!isExpanded && content) {
        question.setAttribute("aria-expanded", "true");
        content.removeAttribute("hidden");
        gsap.fromTo(
            content,
            { height: 0, opacity: 0 },
            { height: "auto", opacity: 1, duration: 0.4, ease: "power2.out" }
            );
        }
    });

    // Optional: Allow keyboard accessibility
    question.addEventListener("keydown", (e: KeyboardEvent) => {
      if (e.key === "Enter" || e.key === " ") {
        (question as HTMLElement).click();
      }
    });
  });
});


// ANIMATION
import { gsap } from 'gsap';

const toggleBtn = document.getElementById('accordionToggle') as HTMLElement;
const content = document.querySelector('.accordion__item') as HTMLElement;
const vertical = document.querySelector('.vertical') as HTMLElement;
const horizontal = document.querySelector('.horizontal') as HTMLElement;

let isOpen: boolean = false;

// Timeline for the + to - icon animation
const iconTL = gsap.timeline({ paused: true });
iconTL
.to(horizontal, {
  duration: 0.2,
  opacity: 0,
  ease: 'power2.inOut'
}, 0)
.to(vertical, {
  duration: 0.3,
  rotate: 90,
  ease: 'power2.inOut'
}, 0);
</script>